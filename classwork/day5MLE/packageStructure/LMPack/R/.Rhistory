setClass(Class="LMOutput",
representation = representation(
coef = "matrix",
rSq = "numeric"
),
prototype = prototype(
coef=matrix(),
rSq=numeric()
)
)
setMethod("initialize", "LMOutput",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
setGeneric("getrSq",
function(object="LMOutput")  {
standardGeneric("getrSq")
}
)
setMethod("getrSq", "LMOutput",
function(object){
return(object@rSq)
}
)
setGeneric("getcoef",
function(object="LMOutput")  {
standardGeneric("getcoef")
}
)
setMethod("getcoef", "LMOutput",
function(object){
return(object@coef)
}
)
setMethod(f="print", "LMOutput",
definition=function(x){
cat("The coefficient table\n")
print(x@coef)
cat("\nThe vector of R-squareds\n")
print(x@rSq)
}
)
setMethod(f="plot", "LMOutput",
definition=function(x){
devAskNewPage(TRUE)
for(i in 1:dim(x@coef)[1]){
plot(1:dim(x@coef)[2],x@coef[i,],xlab="Test Number",ylab=paste("Beta",i-1,sep=""))
}
}
)
setMethod(f="show", "LMOutput",
definition=function(object){
print(object)
plot(object)
}
)
setClass(Class="LMOutputImp",
contains="LMOutput",
representation = representation(
imp = "character"
),
prototype = prototype(
coef = matrix(),
rSq=numeric(),
imp=character()
)
)
setMethod("initialize", "LMOutputImp",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
setGeneric("getimp",
function(object="LMOutputImp")  {
standardGeneric("getimp")
}
)
setMethod("getimp", "LMOutputImp",
function(object){
return(object@imp)
}
)
setMethod(f="print", "LMOutputImp",
definition=function(x){
cat("The coefficient table\n")
print(x@coef)
cat("\nThe vector of R-squareds\n")
print(x@rSq)
cat("\nThe vector of coefficients sorted by importance in descending order")
print(x@imp)
}
)
setMethod(f="plot", "LMOutput",
definition=function(x){
devAskNewPage(TRUE)
for(i in 1:dim(x@coef)[1]){
plot(1:dim(x@coef)[2],x@coef[i,],xlab="Test Number",ylab=paste("Beta",i-1,sep=""))
}
}
)
setMethod(f="show", "LMOutput",
definition=function(object){
print(object)
plot(object)
}
)
setGeneric(name="runLM",
def=function(X, Y, ...)
{standardGeneric("runLM")}
)
setMethod(f="runLM",
definition=function(X, Y, ...){
coef.matrix<-matrix(nrow=(dim(X)[2]+1))
rSq.vec<-numeric()
for(i in 1:dim(X)[2]){
combination<-combn(1:dim(X)[2],i)
for(k in 1:dim(combination)[2]){
temp.model<-lm(Y~X[,combination[,k]])
templm<-numeric(dim(X)[2]+1)
templm[c(1,combination[,k]+1)]<-coefficients(temp.model)
coef.matrix<-cbind(coef.matrix,templm)
rSq.vec<-c(rSq.vec,summary(temp.model)$r.squared)
templm<-numeric()
}
}
coef.matrix<-coef.matrix[,-1]
rownames(coef.matrix)<-paste("Beta",0:(dim(coef.matrix)[1]-1),sep="")
colnames(coef.matrix)<-paste("Test",1:dim(coef.matrix)[2])
return(new("LMOutput", coef=coef.matrix, rSq=rSq.vec))
}
)
M
myX <- matrix(c(1,2,3,4,5,6,4,3,7,8,3,6,7,8,9),nrow=5)
myY <- c(3,5,6,5,7)
runLM(myX, myY)
@
myX <- matrix(c(1,2,3,4,5,6,4,3,7,8,3,6,7,8,9),nrow=5)
myX
setMethod(f="runLM",
definition=function(X, Y, ...){
coef.matrix<-matrix(nrow=(dim(X)[2]+1))
rSq.vec<-numeric()
for(i in 1:dim(X)[2]){
combination<-combn(1:dim(X)[2],i)
for(k in 1:dim(combination)[2]){
temp.model<-lm(Y~X[,combination[,k]])
templm<-numeric(dim(X)[2]+1)
templm[c(1,combination[,k]+1)]<-coefficients(temp.model)
coef.matrix<-cbind(coef.matrix,templm)
rSq.vec<-c(rSq.vec,summary(temp.model)$r.squared)
}
}
coef.matrix<-coef.matrix[,-1]
rownames(coef.matrix)<-paste("Beta",0:(dim(coef.matrix)[1]-1),sep="")
colnames(coef.matrix)<-paste("Test",1:dim(coef.matrix)[2])
return(new("LMOutput", coef=coef.matrix, rSq=rSq.vec))
}
)
runLM(myX, myY)
combos <- combn(1:ncol(M), i)
for(j in 1:ncol(combos)){
lm1 <- numeric(ncol(M) + 1)
lm1[c(1, combos[,j]+1)] <- lm(Y ~ M[,combos[,j]])[["coefficients"]]
R2s <- c(R2s, summary(lm(Y ~ M[,combos[,j]]))[["r.squared"]])
coefs <- cbind(coefs, lm1)
}
coefs <- coefs[,-1]
colnames(coefs) <- paste("Reg", 1:ncol(coefs))
rownames(coefs) <- paste("Coeff", 0:(nrow(coefs)-1))
return(list("Output", "Coefficients"=coefs, "R-squared values"=R2s ))
}
}
RegRun2 <- function(M, Y){
R2s <- numeric()
coefs <- matrix(NA, nrow=ncol(M)+1)
for(i in 1:ncol(M)){
combos <- combn(1:ncol(M), i)
for(j in 1:ncol(combos)){
lm1 <- numeric(ncol(M) + 1)
lm1[c(1, combos[,j]+1)] <- lm(Y ~ M[,combos[,j]])[["coefficients"]]
R2s <- c(R2s, summary(lm(Y ~ M[,combos[,j]]))[["r.squared"]])
coefs <- cbind(coefs, lm1)
}
coefs <- coefs[,-1]
colnames(coefs) <- paste("Reg", 1:ncol(coefs))
rownames(coefs) <- paste("Coeff", 0:(nrow(coefs)-1))
return(list("Output", "Coefficients"=coefs, "R-squared values"=R2s ))
}
}
RegRun2(M,Y)
RegRun2(mM,mY)
RegRun2(myX,myY)
dim(X)
dim(myX)
dim(myX)[2]
1:dim(myX)[2]
ncol(myX)+1
1:ncol(M)
1:ncol(myX)
1:dim(myX)[2]
coef.matrix<-matrix(nrow=(dim(X)[2]+1))
coef.matrix<-matrix(nrow=(dim(myX)[2]+1))
coef.matrix
1:dim(myX)[2]
1:ncol(myX)
templm<-numeric(dim(myX)[2]+1)
templm
lm1 <- numeric(ncol(myX) + 1)
lm1
